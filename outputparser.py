#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by Grako.
#
#    https://pypi.python.org/pypi/grako/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import print_function, division, absolute_import, unicode_literals

from grako.parsing import graken, Parser
from grako.util import re, RE_FLAGS, generic_main  # noqa


__version__ = (2016, 3, 19, 23, 16, 58, 5)

__all__ = [
    'shakespeareParser',
    'shakespeareSemantics',
    'main'
]

KEYWORDS = set([])


class shakespeareParser(Parser):
    def __init__(self,
                 whitespace=None,
                 nameguard=None,
                 comments_re=None,
                 eol_comments_re=None,
                 ignorecase=True,
                 left_recursion=True,
                 keywords=KEYWORDS,
                 **kwargs):
        super(shakespeareParser, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            left_recursion=left_recursion,
            keywords=keywords,
            **kwargs
        )

    @graken()
    def _be_(self):
        with self._choice():
            with self._option():
                self._token('am')
            with self._option():
                self._token('are')
            with self._option():
                self._token('art')
            with self._option():
                self._token('be')
            with self._option():
                self._token('is')
            self._error('expecting one of: am are art be is')

    @graken()
    def _article_(self):
        with self._choice():
            with self._option():
                self._token('a')
            with self._option():
                self._token('an')
            with self._option():
                self._token('the')
            self._error('expecting one of: a an the')

    @graken()
    def _first_person_(self):
        with self._choice():
            with self._option():
                self._token('I')
            with self._option():
                self._token('me')
            self._error('expecting one of: I me')

    @graken()
    def _second_person_(self):
        with self._choice():
            with self._option():
                self._token('thee')
            with self._option():
                self._token('thou')
            with self._option():
                self._token('you')
            self._error('expecting one of: thee thou you')

    @graken()
    def _positive_comparative_(self):
        with self._choice():
            with self._option():
                self._token('better')
            with self._option():
                self._token('bigger')
            with self._option():
                self._token('fresher')
            with self._option():
                self._token('friendlier')
            with self._option():
                self._token('nicer')
            with self._option():
                self._token('jollier')
            self._error('expecting one of: better bigger fresher friendlier jollier nicer')

    @graken()
    def _negative_comparative_(self):
        with self._choice():
            with self._option():
                self._token('punier')
            with self._option():
                self._token('smaller')
            with self._option():
                self._token('worse')
            self._error('expecting one of: punier smaller worse')

    @graken()
    def _negative_adjective_(self):
        with self._choice():
            with self._option():
                self._token('bad')
            with self._option():
                self._token('cowardly')
            with self._option():
                self._token('cursed')
            with self._option():
                self._token('damned')
            with self._option():
                self._token('dirty')
            with self._option():
                self._token('disgusting')
            with self._option():
                self._token('distasteful')
            with self._option():
                self._token('dusty')
            with self._option():
                self._token('evil')
            with self._option():
                self._token('fat')
            with self._option():
                self._token('fat-kidneyed')
            with self._option():
                self._token('fatherless')
            with self._option():
                self._token('foul')
            with self._option():
                self._token('hairy')
            with self._option():
                self._token('half-witted')
            with self._option():
                self._token('horrible')
            with self._option():
                self._token('horrid')
            with self._option():
                self._token('infected')
            with self._option():
                self._token('lying')
            with self._option():
                self._token('miserable')
            with self._option():
                self._token('misused')
            with self._option():
                self._token('oozing')
            with self._option():
                self._token('rotten')
            with self._option():
                self._token('rotten')
            with self._option():
                self._token('smelly')
            with self._option():
                self._token('snotty')
            with self._option():
                self._token('sorry')
            with self._option():
                self._token('stinking')
            with self._option():
                self._token('stuffed')
            with self._option():
                self._token('stupid')
            with self._option():
                self._token('vile')
            with self._option():
                self._token('villainous')
            with self._option():
                self._token('worried')
            self._error('expecting one of: bad cowardly cursed damned dirty disgusting distasteful dusty evil fat fat-kidneyed fatherless foul hairy half-witted horrible horrid infected lying miserable misused oozing rotten smelly snotty sorry stinking stuffed stupid vile villainous worried')

    @graken()
    def _neutral_adjective_(self):
        with self._choice():
            with self._option():
                self._token('big')
            with self._option():
                self._token('black')
            with self._option():
                self._token('blue')
            with self._option():
                self._token('bluest')
            with self._option():
                self._token('bottomless')
            with self._option():
                self._token('furry')
            with self._option():
                self._token('green')
            with self._option():
                self._token('hard')
            with self._option():
                self._token('huge')
            with self._option():
                self._token('large')
            with self._option():
                self._token('little')
            with self._option():
                self._token('normal')
            with self._option():
                self._token('old')
            with self._option():
                self._token('purple')
            with self._option():
                self._token('red')
            with self._option():
                self._token('rural')
            with self._option():
                self._token('small')
            with self._option():
                self._token('tiny')
            with self._option():
                self._token('white')
            with self._option():
                self._token('yellow')
            self._error('expecting one of: big black blue bluest bottomless furry green hard huge large little normal old purple red rural small tiny white yellow')

    @graken()
    def _positive_adjective_(self):
        with self._choice():
            with self._option():
                self._token('amazing')
            with self._option():
                self._token('beautiful')
            with self._option():
                self._token('blossoming')
            with self._option():
                self._token('bold')
            with self._option():
                self._token('brave')
            with self._option():
                self._token('charming')
            with self._option():
                self._token('clearest')
            with self._option():
                self._token('cunning')
            with self._option():
                self._token('cute')
            with self._option():
                self._token('delicious')
            with self._option():
                self._token('embroidered')
            with self._option():
                self._token('fair')
            with self._option():
                self._token('fine')
            with self._option():
                self._token('gentle')
            with self._option():
                self._token('golden')
            with self._option():
                self._token('good')
            with self._option():
                self._token('handsome')
            with self._option():
                self._token('happy')
            with self._option():
                self._token('healthy')
            with self._option():
                self._token('honest')
            with self._option():
                self._token('lovely')
            with self._option():
                self._token('loving')
            with self._option():
                self._token('mighty')
            with self._option():
                self._token('noble')
            with self._option():
                self._token('peaceful')
            with self._option():
                self._token('pretty')
            with self._option():
                self._token('prompt')
            with self._option():
                self._token('proud')
            with self._option():
                self._token('reddest')
            with self._option():
                self._token('rich')
            with self._option():
                self._token('smooth')
            with self._option():
                self._token('sunny')
            with self._option():
                self._token('sweet')
            with self._option():
                self._token('sweetest')
            with self._option():
                self._token('trustworthy')
            with self._option():
                self._token('warm')
            self._error('expecting one of: amazing beautiful blossoming bold brave charming clearest cunning cute delicious embroidered fair fine gentle golden good handsome happy healthy honest lovely loving mighty noble peaceful pretty prompt proud reddest rich smooth sunny sweet sweetest trustworthy warm')

    @graken()
    def _negative_noun_(self):
        with self._choice():
            with self._option():
                self._token('Hell')
            with self._option():
                self._token('Microsoft')
            with self._option():
                self._token('bastard')
            with self._option():
                self._token('beggar')
            with self._option():
                self._token('blister')
            with self._option():
                self._token('codpiece')
            with self._option():
                self._token('coward')
            with self._option():
                self._token('curse')
            with self._option():
                self._token('death')
            with self._option():
                self._token('devil')
            with self._option():
                self._token('draught')
            with self._option():
                self._token('famine')
            with self._option():
                self._token('flirt-gill')
            with self._option():
                self._token('goat')
            with self._option():
                self._token('hate')
            with self._option():
                self._token('hog')
            with self._option():
                self._token('hound')
            with self._option():
                self._token('leech')
            with self._option():
                self._token('lie')
            with self._option():
                self._token('pig')
            with self._option():
                self._token('plague')
            with self._option():
                self._token('starvation')
            with self._option():
                self._token('toad')
            with self._option():
                self._token('war')
            with self._option():
                self._token('wolf')
            self._error('expecting one of: Hell Microsoft bastard beggar blister codpiece coward curse death devil draught famine flirt-gill goat hate hog hound leech lie pig plague starvation toad war wolf')

    @graken()
    def _neutral_noun_(self):
        with self._choice():
            with self._option():
                self._token('animal')
            with self._option():
                self._token('aunt')
            with self._option():
                self._token('brother')
            with self._option():
                self._token('cat')
            with self._option():
                self._token('chihuahua')
            with self._option():
                self._token('cousin')
            with self._option():
                self._token('cow')
            with self._option():
                self._token('daughter')
            with self._option():
                self._token('door')
            with self._option():
                self._token('face')
            with self._option():
                self._token('father')
            with self._option():
                self._token('fellow')
            with self._option():
                self._token('granddaughter')
            with self._option():
                self._token('grandfather')
            with self._option():
                self._token('grandmother')
            with self._option():
                self._token('grandson')
            with self._option():
                self._token('hair')
            with self._option():
                self._token('hamster')
            with self._option():
                self._token('horse')
            with self._option():
                self._token('lamp')
            with self._option():
                self._token('lantern')
            with self._option():
                self._token('mistletoe')
            with self._option():
                self._token('moon')
            with self._option():
                self._token('morning')
            with self._option():
                self._token('mother')
            with self._option():
                self._token('nephew')
            with self._option():
                self._token('niece')
            with self._option():
                self._token('nose')
            with self._option():
                self._token('purse')
            with self._option():
                self._token('road')
            with self._option():
                self._token('roman')
            with self._option():
                self._token('sister')
            with self._option():
                self._token('sky')
            with self._option():
                self._token('son')
            with self._option():
                self._token('squirrel')
            with self._option():
                self._token('stone wall')
            with self._option():
                self._token('thing')
            with self._option():
                self._token('town')
            with self._option():
                self._token('tree')
            with self._option():
                self._token('uncle')
            with self._option():
                self._token('wind')
            self._error('expecting one of: animal aunt brother cat chihuahua cousin cow daughter door face father fellow granddaughter grandfather grandmother grandson hair hamster horse lamp lantern mistletoe moon morning mother nephew niece nose purse road roman sister sky son squirrel stone wall thing town tree uncle wind')

    @graken()
    def _positive_noun_(self):
        with self._choice():
            with self._option():
                self._token('Heaven')
            with self._option():
                self._token('King')
            with self._option():
                self._token('Lord')
            with self._option():
                self._token('angel')
            with self._option():
                self._token('flower')
            with self._option():
                self._token('happiness')
            with self._option():
                self._token('joy')
            with self._option():
                self._token('plum')
            with self._option():
                self._token("summer's day")
            with self._option():
                self._token('hero')
            with self._option():
                self._token('rose')
            with self._option():
                self._token('kingdom')
            with self._option():
                self._token('pony')
            self._error("expecting one of: Heaven King Lord angel flower happiness hero joy kingdom plum pony rose summer's day")

    @graken()
    def _character_(self):
        with self._choice():
            with self._option():
                self._token('Achilles')
            with self._option():
                self._token('Adonis')
            with self._option():
                self._token('Adriana')
            with self._option():
                self._token('Aegeon')
            with self._option():
                self._token('Aemilia')
            with self._option():
                self._token('Agamemnon')
            with self._option():
                self._token('Agrippa')
            with self._option():
                self._token('Ajax')
            with self._option():
                self._token('Alonso')
            with self._option():
                self._token('Andromache')
            with self._option():
                self._token('Angelo')
            with self._option():
                self._token('Antiochus')
            with self._option():
                self._token('Antonio')
            with self._option():
                self._token('Arthur')
            with self._option():
                self._token('Autolycus')
            with self._option():
                self._token('Balthazar')
            with self._option():
                self._token('Banquo')
            with self._option():
                self._token('Beatrice')
            with self._option():
                self._token('Benedick')
            with self._option():
                self._token('Benvolio')
            with self._option():
                self._token('Bianca')
            with self._option():
                self._token('Brabantio')
            with self._option():
                self._token('Brutus')
            with self._option():
                self._token('Capulet')
            with self._option():
                self._token('Cassandra')
            with self._option():
                self._token('Cassius')
            with self._option():
                self._token('Christopher Sly')
            with self._option():
                self._token('Cicero')
            with self._option():
                self._token('Claudio')
            with self._option():
                self._token('Claudius')
            with self._option():
                self._token('Cleopatra')
            with self._option():
                self._token('Cordelia')
            with self._option():
                self._token('Cornelius')
            with self._option():
                self._token('Cressida')
            with self._option():
                self._token('Cymberline')
            with self._option():
                self._token('Demetrius')
            with self._option():
                self._token('Desdemona')
            with self._option():
                self._token('Dionyza')
            with self._option():
                self._token('Doctor Caius')
            with self._option():
                self._token('Dogberry')
            with self._option():
                self._token('Don John')
            with self._option():
                self._token('Don Pedro')
            with self._option():
                self._token('Donalbain')
            with self._option():
                self._token('Dorcas')
            with self._option():
                self._token('Duncan')
            with self._option():
                self._token('Egeus')
            with self._option():
                self._token('Emilia')
            with self._option():
                self._token('Escalus')
            with self._option():
                self._token('Falstaff')
            with self._option():
                self._token('Fenton')
            with self._option():
                self._token('Ferdinand')
            with self._option():
                self._token('Ford')
            with self._option():
                self._token('Fortinbras')
            with self._option():
                self._token('Francisca')
            with self._option():
                self._token('Friar John')
            with self._option():
                self._token('Friar Laurence')
            with self._option():
                self._token('Gertrude')
            with self._option():
                self._token('Goneril')
            with self._option():
                self._token('Hamlet')
            with self._option():
                self._token('Hecate')
            with self._option():
                self._token('Hector')
            with self._option():
                self._token('Helen')
            with self._option():
                self._token('Helena')
            with self._option():
                self._token('Hermia')
            with self._option():
                self._token('Hermonie')
            with self._option():
                self._token('Hippolyta')
            with self._option():
                self._token('Horatio')
            with self._option():
                self._token('Imogen')
            with self._option():
                self._token('Isabella')
            with self._option():
                self._token('John of Gaunt')
            with self._option():
                self._token('John of Lancaster')
            with self._option():
                self._token('Julia')
            with self._option():
                self._token('Juliet')
            with self._option():
                self._token('Julius Caesar')
            with self._option():
                self._token('King Henry')
            with self._option():
                self._token('King John')
            with self._option():
                self._token('King Lear')
            with self._option():
                self._token('King Richard')
            with self._option():
                self._token('Lady Capulet')
            with self._option():
                self._token('Lady Macbeth')
            with self._option():
                self._token('Lady Macduff')
            with self._option():
                self._token('Lady Montague')
            with self._option():
                self._token('Lennox')
            with self._option():
                self._token('Leonato')
            with self._option():
                self._token('Luciana')
            with self._option():
                self._token('Lucio')
            with self._option():
                self._token('Lychorida')
            with self._option():
                self._token('Lysander')
            with self._option():
                self._token('Macbeth')
            with self._option():
                self._token('Macduff')
            with self._option():
                self._token('Malcolm')
            with self._option():
                self._token('Mariana')
            with self._option():
                self._token('Mark Antony')
            with self._option():
                self._token('Mercutio')
            with self._option():
                self._token('Miranda')
            with self._option():
                self._token('Mistress Ford')
            with self._option():
                self._token('Mistress Overdone')
            with self._option():
                self._token('Mistress Page')
            with self._option():
                self._token('Montague')
            with self._option():
                self._token('Mopsa')
            with self._option():
                self._token('Oberon')
            with self._option():
                self._token('Octavia')
            with self._option():
                self._token('Octavius Caesar')
            with self._option():
                self._token('Olivia')
            with self._option():
                self._token('Ophelia')
            with self._option():
                self._token('Orlando')
            with self._option():
                self._token('Orsino')
            with self._option():
                self._token('Othello')
            with self._option():
                self._token('Page')
            with self._option():
                self._token('Pantino')
            with self._option():
                self._token('Paris')
            with self._option():
                self._token('Pericles')
            with self._option():
                self._token('Pinch')
            with self._option():
                self._token('Polonius')
            with self._option():
                self._token('Pompeius')
            with self._option():
                self._token('Portia')
            with self._option():
                self._token('Priam')
            with self._option():
                self._token('Prince Henry')
            with self._option():
                self._token('Prospero')
            with self._option():
                self._token('Proteus')
            with self._option():
                self._token('Publius')
            with self._option():
                self._token('Puck')
            with self._option():
                self._token('Queen Elinor')
            with self._option():
                self._token('Regan')
            with self._option():
                self._token('Robin')
            with self._option():
                self._token('Romeo')
            with self._option():
                self._token('Rosalind')
            with self._option():
                self._token('Sebastian')
            with self._option():
                self._token('Shallow')
            with self._option():
                self._token('Shylock')
            with self._option():
                self._token('Slender')
            with self._option():
                self._token('Solinus')
            with self._option():
                self._token('Stephano')
            with self._option():
                self._token('Thaisa')
            with self._option():
                self._token('The Abbot of Westminster')
            with self._option():
                self._token('The Apothecary')
            with self._option():
                self._token('The Archbishop of Canterbury')
            with self._option():
                self._token('The Duke of Milan')
            with self._option():
                self._token('The Duke of Venice')
            with self._option():
                self._token('The Ghost')
            with self._option():
                self._token('Theseus')
            with self._option():
                self._token('Thurio')
            with self._option():
                self._token('Timon')
            with self._option():
                self._token('Titania')
            with self._option():
                self._token('Titus')
            with self._option():
                self._token('Troilus')
            with self._option():
                self._token('Tybalt')
            with self._option():
                self._token('Ulysses')
            with self._option():
                self._token('Valentine')
            with self._option():
                self._token('Venus')
            with self._option():
                self._token('Vincentio')
            with self._option():
                self._token('Viola')
            self._error('expecting one of: Achilles Adonis Adriana Aegeon Aemilia Agamemnon Agrippa Ajax Alonso Andromache Angelo Antiochus Antonio Arthur Autolycus Balthazar Banquo Beatrice Benedick Benvolio Bianca Brabantio Brutus Capulet Cassandra Cassius Christopher Sly Cicero Claudio Claudius Cleopatra Cordelia Cornelius Cressida Cymberline Demetrius Desdemona Dionyza Doctor Caius Dogberry Don John Don Pedro Donalbain Dorcas Duncan Egeus Emilia Escalus Falstaff Fenton Ferdinand Ford Fortinbras Francisca Friar John Friar Laurence Gertrude Goneril Hamlet Hecate Hector Helen Helena Hermia Hermonie Hippolyta Horatio Imogen Isabella John of Gaunt John of Lancaster Julia Juliet Julius Caesar King Henry King John King Lear King Richard Lady Capulet Lady Macbeth Lady Macduff Lady Montague Lennox Leonato Luciana Lucio Lychorida Lysander Macbeth Macduff Malcolm Mariana Mark Antony Mercutio Miranda Mistress Ford Mistress Overdone Mistress Page Montague Mopsa Oberon Octavia Octavius Caesar Olivia Ophelia Orlando Orsino Othello Page Pantino Paris Pericles Pinch Polonius Pompeius Portia Priam Prince Henry Prospero Proteus Publius Puck Queen Elinor Regan Robin Romeo Rosalind Sebastian Shallow Shylock Slender Solinus Stephano Thaisa The Abbot of Westminster The Apothecary The Archbishop of Canterbury The Duke of Milan The Duke of Venice The Ghost Theseus Thurio Timon Titania Titus Troilus Tybalt Ulysses Valentine Venus Vincentio Viola')

    @graken()
    def _nothing_(self):
        with self._choice():
            with self._option():
                self._token('nothing')
            with self._option():
                self._token('zero')
            self._error('expecting one of: nothing zero')

    @graken()
    def _positive_or_neutral_adjective_(self):
        with self._choice():
            with self._option():
                self._positive_adjective_()
            with self._option():
                self._neutral_adjective_()
            self._error('no available options')

    @graken()
    def _positive_or_neutral_noun_(self):
        with self._choice():
            with self._option():
                self._positive_noun_()
            with self._option():
                self._neutral_noun_()
            self._error('no available options')

    @graken()
    def _neutral_comparative_(self):
        self._token('as')
        with self._group():
            with self._choice():
                with self._option():
                    self._negative_adjective_()
                with self._option():
                    self._positive_or_neutral_adjective_()
                self._error('no available options')
        self._token('as')

    @graken()
    def _negative_noun_phrase_(self):
        with self._optional():
            self._article_()

        def block1():
            self._negative_adjective_()
        self._closure(block1)
        self.name_last_node('adjectives')
        self._negative_noun_()
        self.name_last_node('noun')

        self.ast._define(
            ['adjectives', 'noun'],
            []
        )

    @graken()
    def _positive_noun_phrase_(self):
        with self._optional():
            self._article_()

        def block1():
            self._positive_or_neutral_adjective_()
        self._closure(block1)
        self.name_last_node('adjectives')
        self._positive_or_neutral_noun_()
        self.name_last_node('noun')

        self.ast._define(
            ['adjectives', 'noun'],
            []
        )

    @graken()
    def _noun_phrase_(self):
        with self._choice():
            with self._option():
                self._negative_noun_phrase_()
            with self._option():
                self._positive_noun_phrase_()
            self._error('no available options')

    @graken()
    def _value_(self):
        with self._choice():
            with self._option():
                self._first_person_()
                self.name_last_node('first_person')
            with self._option():
                self._second_person_()
                self.name_last_node('second_person')
            with self._option():
                self._noun_phrase_()
                self.name_last_node('noun_phrase')
            with self._option():
                self._character_()
                self.name_last_node('character')
            with self._option():
                self._nothing_()
                self.name_last_node('nothing')
            with self._option():
                self._expression_()
                self.name_last_node('expression')
            self._error('no available options')

        self.ast._define(
            ['first_person', 'second_person', 'noun_phrase', 'character', 'nothing', 'expression'],
            []
        )

    @graken()
    def _binary_operation_(self):
        with self._choice():
            with self._option():
                self._token('the difference between')
            with self._option():
                self._token('the product of')
            with self._option():
                self._token('the quotient between')
            with self._option():
                self._token('the remainder of the quotient between')
            with self._option():
                self._token('the sum of')
            self._error('expecting one of: the difference between the product of the quotient between the remainder of the quotient between the sum of')

    @graken()
    def _binary_expression_(self):
        self._value_()
        self.name_last_node('first_value')
        self._binary_operation_()
        self.name_last_node('operation')
        self._value_()
        self.name_last_node('second_value')

        self.ast._define(
            ['first_value', 'operation', 'second_value'],
            []
        )

    @graken()
    def _unary_operation_(self):
        with self._choice():
            with self._option():
                self._token('the cube of')
            with self._option():
                self._token('the factorial of')
            with self._option():
                self._token('the square of')
            with self._option():
                self._token('the square root of')
            with self._option():
                self._token('twice')
            self._error('expecting one of: the cube of the factorial of the square of the square root of twice')

    @graken()
    def _unary_expression_(self):
        self._unary_operation_()
        self.name_last_node('operation')
        self._value_()
        self.name_last_node('value')

        self.ast._define(
            ['operation', 'value'],
            []
        )

    @graken()
    def _expression_(self):
        with self._choice():
            with self._option():
                self._binary_expression_()
            with self._option():
                self._unary_expression_()
            self._error('no available options')

    @graken()
    def _negative_if_(self):
        self._token('If not,')

    @graken()
    def _positive_if_(self):
        self._token('If so,')

    @graken()
    def _question_(self):
        self._be_()
        self._value_()
        self.name_last_node('first_value')
        with self._group():
            with self._choice():
                with self._option():
                    self._positive_comparative_()
                    self.name_last_node('positive_comparative')
                with self._option():
                    self._neutral_comparative_()
                    self.name_last_node('neutral_comparative')
                with self._option():
                    self._negative_comparative_()
                    self.name_last_node('negative_comparative')
                self._error('no available options')
        self._token('than')
        self._value_()
        self.name_last_node('second_value')
        self._token('?')

        self.ast._define(
            ['first_value', 'positive_comparative', 'neutral_comparative', 'negative_comparative', 'second_value'],
            []
        )

    @graken()
    def _assignment_(self):
        self._second_person_()
        with self._optional():
            self._be_()
        with self._optional():
            self._token('as')
            with self._optional():
                with self._group():
                    with self._choice():
                        with self._option():
                            self._positive_or_neutral_adjective_()
                        with self._option():
                            self._negative_adjective_()
                        self._error('no available options')
                self._token('as')
        self._value_()
        self.name_last_node('value')
        with self._group():
            with self._choice():
                with self._option():
                    self._token('!')
                with self._option():
                    self._token('.')
                self._error('expecting one of: ! .')

        self.ast._define(
            ['value'],
            []
        )

    @graken()
    def _goto_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._negative_if_()
                with self._option():
                    self._positive_if_()
                self._error('no available options')
        self.name_last_node('condition')
        with self._group():
            with self._choice():
                with self._option():
                    self._token('Let us')
                with self._option():
                    self._token('let us')
                with self._option():
                    self._token('We shall')
                with self._option():
                    self._token('we shall')
                with self._option():
                    self._token('We must')
                with self._option():
                    self._token('we must')
                self._error('expecting one of: Let us We must We shall let us we must we shall')
        with self._group():
            with self._choice():
                with self._option():
                    self._token('return to')
                with self._option():
                    self._token('proceed to')
                self._error('expecting one of: proceed to return to')
        self._token('scene')
        self._pattern(r'"^M{0,4}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$"')
        self.name_last_node('destination')

        self.ast._define(
            ['condition', 'destination'],
            []
        )

    @graken()
    def _sentence_(self):
        with self._choice():
            with self._option():
                self._question_()
            with self._option():
                self._assignment_()
            with self._option():
                self._goto_()
            self._error('no available options')


class shakespeareSemantics(object):
    def be(self, ast):
        return ast

    def article(self, ast):
        return ast

    def first_person(self, ast):
        return ast

    def second_person(self, ast):
        return ast

    def positive_comparative(self, ast):
        return ast

    def negative_comparative(self, ast):
        return ast

    def negative_adjective(self, ast):
        return ast

    def neutral_adjective(self, ast):
        return ast

    def positive_adjective(self, ast):
        return ast

    def negative_noun(self, ast):
        return ast

    def neutral_noun(self, ast):
        return ast

    def positive_noun(self, ast):
        return ast

    def character(self, ast):
        return ast

    def nothing(self, ast):
        return ast

    def positive_or_neutral_adjective(self, ast):
        return ast

    def positive_or_neutral_noun(self, ast):
        return ast

    def neutral_comparative(self, ast):
        return ast

    def negative_noun_phrase(self, ast):
        return ast

    def positive_noun_phrase(self, ast):
        return ast

    def noun_phrase(self, ast):
        return ast

    def value(self, ast):
        return ast

    def binary_operation(self, ast):
        return ast

    def binary_expression(self, ast):
        return ast

    def unary_operation(self, ast):
        return ast

    def unary_expression(self, ast):
        return ast

    def expression(self, ast):
        return ast

    def negative_if(self, ast):
        return ast

    def positive_if(self, ast):
        return ast

    def question(self, ast):
        return ast

    def assignment(self, ast):
        return ast

    def goto(self, ast):
        return ast

    def sentence(self, ast):
        return ast


def main(
        filename,
        startrule,
        trace=False,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re=None,
        ignorecase=True,
        left_recursion=True,
        **kwargs):

    with open(filename) as f:
        text = f.read()
    parser = shakespeareParser(parseinfo=False)
    ast = parser.parse(
        text,
        startrule,
        filename=filename,
        trace=trace,
        whitespace=whitespace,
        nameguard=nameguard,
        ignorecase=ignorecase,
        **kwargs)
    return ast

if __name__ == '__main__':
    import json
    ast = generic_main(main, shakespeareParser, name='shakespeare')
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(ast, indent=2))
    print()
